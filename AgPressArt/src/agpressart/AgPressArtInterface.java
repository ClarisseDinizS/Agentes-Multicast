/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package agpressart;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import pessoa.Pessoa;

/**
 *
 * @author doug_
 */
public class AgPressArtInterface extends javax.swing.JFrame {

    /**
     * Creates new form AgPressArtInterface
     */
    Pessoa pessoa;
    public AgPressArtInterface(Pessoa pessoa) {
        initComponents();
        this.pessoa = pessoa;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtSistolica = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDiastolica = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agente Avaliador de Pressão Arterial");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Agente Avaliador de Pressão Arterial"));

        jLabel2.setText("Pressão Sistólica");

        jLabel3.setText("Pressão Diastólica");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(txtDiastolica, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(txtSistolica))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSistolica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDiastolica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Enviar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jButton1)
                        .addGap(74, 74, 74)
                        .addComponent(jButton2)
                        .addGap(0, 64, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        

        float auxPreSistolica = (Integer.parseInt(txtSistolica.getText()) - 120) / (140 - 120);
        float auxPreDiastolica = (Integer.parseInt(txtDiastolica.getText()) - 80) / (90 - 80);
        
        String resposta;
        
        pessoa.setTipoPessoaString("Pressao_Arterial");
        pessoa.setPreSistolica(auxPreSistolica);
        pessoa.setPreDiastolica(auxPreDiastolica);
        
        AgPressArt agente = new AgPressArt();
        
        
        System.out.println("Antes Resposta");
        resposta = agente.enviaMensagem(pessoa);
        
        System.out.println("Após resposta");
        JOptionPane.showMessageDialog(null, resposta);
        
        limparBotões();
        this.dispose();
        
            
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgPressArtInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgPressArtInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgPressArtInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgPressArtInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        int porta = 6868;
        InetAddress ipGrupo = null;
        MulticastSocket s = null;
        
        //O Agente vai ficar rodando ao mesmo tempo que todos os outros e seguirá para o próx
        //while quando receber uma resposta
        try {
            ipGrupo = InetAddress.getByName("224.225.226.227");
            s = new MulticastSocket(porta);
            s.joinGroup(ipGrupo);
        } catch (IOException ex) {
            Logger.getLogger(AgPressArtInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] buf = new byte[1512];
        
        //Quando ele receber a informações com o dado ele vai entrar dentro do While
        //e fazer as verificações
        while (true) {
            DatagramPacket recebido = new DatagramPacket(buf, buf.length);
            try {
                //No try ele vai receber, converter e deserealizar a informação que foi recebida
                s.setSoTimeout(120000);
                s.receive(recebido);
                byte[] data = recebido.getData();
                
                ByteArrayInputStream objetoByte = new ByteArrayInputStream(data);
                ObjectInputStream objeto = new ObjectInputStream(objetoByte);
                
                //Então, ele vai verificar se Pessoa é uma instancia de objeto
                Pessoa pessoa = (Pessoa) objeto.readObject();
                
                //E se caso ela realmente for uma instância de objeto 
                if (pessoa instanceof Pessoa) {
                    
                    //Ele vai verificar se essa pessoa que foi recebida possui o tipo da pessoa
                    //do Agente anterior que foi enviado, que nesse caso seria o de "Obesidade"
                    if (pessoa.getTipoPessoaString().equals("Obesidade")) {
                        
                        
                        //Então após a verificação ele abre a interface para o usuário inserir as informações
                        java.awt.EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                new AgPressArtInterface(pessoa).setVisible(true);
                            } 
                        }); 
                    }
                }
            } catch (SocketException ex) {
                Logger.getLogger(AgPressArtInterface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(AgPressArtInterface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AgPressArtInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void limparBotões() {
        txtSistolica.setText("");
        txtDiastolica.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtDiastolica;
    private javax.swing.JTextField txtSistolica;
    // End of variables declaration//GEN-END:variables
}
